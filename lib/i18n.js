// WorkTime Buddy - Internationalization (i18n) System
class I18n {
    constructor() {
        this.currentLanguage = 'en';
        this.translations = {
            en: {
                // App
                'app-title': 'WorkTime Buddy',
                'app-tooltip': 'WorkTime Buddy - Track your working hours',

                // UI Elements
                'today': 'Today',
                'startTime': 'Start Time',
                'lunchStart': 'Lunch Start',
                'lunchEnd': 'Lunch End',
                'requiredHours': 'Required Hours',
                'startNow': 'Start Now',
                'startLunch': 'Start Lunch',
                'endLunch': 'End Lunch',
                'resetToday': 'Reset Today',
                'endTime': 'End Time',
                'worked': 'Worked',
                'remaining': 'Remaining',
                'overtime': 'Overtime',

                // Status
                'status.normal': 'Normal',
                'status.lunch': 'On Lunch',
                'status.overtime': 'Overtime',
                'status.ready': 'Ready',
                'status.working': 'Working',
                'on-track': 'On track',
                'start-your-work-day': 'Start your work day',
                'enjoy-your-break': 'Enjoy your break',
                'keep-it-up': 'Keep it up!',
                'time-to-go-home': 'Time to go home!',

                // Options
                'settings': 'Settings',
                'save': 'Save',
                'resetDefaults': 'Reset to Defaults',
                'preLeaveNotifyMinutes': 'Pre-leave Notification (minutes)',
                'cancel': 'Cancel',
                'export-data': 'Export Settings',
                'import-data': 'Import Settings',
                'reset-data': 'Reset All Data',
                'add-holiday': 'Add Holiday',

                // Settings Categories
                'general-settings': 'General Settings',
                'notification-settings': 'Notification Settings',
                'badge-settings': 'Badge Settings',
                'working-days-settings': 'Working Days',
                'holidays-settings': 'Holidays',
                'data-management': 'Data Management',
                'language': 'Language',
                'theme': 'Theme',
                'badge-mode': 'Badge Display Mode',

                // Descriptions
                'required-hours-desc': 'Default number of hours you need to work per day',
                'pre-leave-desc': 'How many minutes before end time to show reminder',
                'language-desc': 'Interface language',
                'theme-desc': 'Visual theme for the extension',
                'badge-mode-desc': 'What to display on the extension icon badge',
                'working-days-desc': 'Select which days you typically work',
                'holidays-desc': 'Add holidays when you don\'t work',

                // Notifications
                'notif.preLeave.title': 'WorkTime Buddy',
                'notif.preLeave.msg': 'You have {minutes} minutes left before your work day ends!',
                'notif.leaveNow.title': 'WorkTime Buddy',
                'notif.leaveNow.msg': 'Your work day is over! Time to go home! üè†',
                'notif.backFromLunch.title': 'WorkTime Buddy',
                'notif.backFromLunch.msg': 'Welcome back from lunch! Time to get back to work! üíº',
                'notif.workEnded.title': 'WorkTime Buddy',
                'notif.workEnded.msg': 'Work session ended! Have a great rest of your day! üåü',
                'notif.overtime.title': 'WorkTime Buddy',
                'notif.overtime.msg': 'Continuing in overtime mode. Remember to take breaks! ‚ö†Ô∏è',

                // Notification Settings
                'pre-leave-notification': 'Pre-leave reminder notification',
                'end-time-notification': 'End time notification',
                'lunch-end-notification': 'Back from lunch notification',
                'pre-leave-notification-desc': 'Get notified before your work day ends',
                'end-time-notification-desc': 'Get notified when your work day is over',
                'lunch-end-notification-desc': 'Get reminded to return from lunch break',

                // Badge Modes
                'badge-minutes': 'Minutes remaining',
                'badge-hours': 'Hours remaining',
                'badge-percentage': 'Percentage complete',
                'badge-none': 'No badge',

                // Days
                'monday': 'Monday',
                'tuesday': 'Tuesday',
                'wednesday': 'Wednesday',
                'thursday': 'Thursday',
                'friday': 'Friday',
                'saturday': 'Saturday',
                'sunday': 'Sunday',

                // Settings description
                'settings-desc': 'Customize your work time tracking experience'
            },
            vi: {
                // App
                'app-title': 'WorkTime Buddy',
                'app-tooltip': 'WorkTime Buddy - Theo d√µi gi·ªù l√†m vi·ªác',

                // UI Elements
                'today': 'H√¥m nay',
                'startTime': 'Gi·ªù b·∫Øt ƒë·∫ßu',
                'lunchStart': 'B·∫Øt ƒë·∫ßu ngh·ªâ tr∆∞a',
                'lunchEnd': 'K·∫øt th√∫c ngh·ªâ tr∆∞a',
                'requiredHours': 'S·ªë gi·ªù l√†m vi·ªác',
                'startNow': 'B·∫Øt ƒë·∫ßu ngay',
                'startLunch': 'B·∫Øt ƒë·∫ßu ngh·ªâ tr∆∞a',
                'endLunch': 'K·∫øt th√∫c ngh·ªâ tr∆∞a',
                'resetToday': 'ƒê·∫∑t l·∫°i h√¥m nay',
                'endTime': 'Gi·ªù k·∫øt th√∫c',
                'worked': 'ƒê√£ l√†m vi·ªác',
                'remaining': 'C√≤n l·∫°i',
                'overtime': 'TƒÉng ca',

                // Status
                'status.normal': 'B√¨nh th∆∞·ªùng',
                'status.lunch': 'Ngh·ªâ tr∆∞a',
                'status.overtime': 'TƒÉng ca',
                'status.ready': 'S·∫µn s√†ng',
                'status.working': 'ƒêang l√†m vi·ªác',
                'on-track': 'ƒê√∫ng ti·∫øn ƒë·ªô',
                'start-your-work-day': 'B·∫Øt ƒë·∫ßu ng√†y l√†m vi·ªác',
                'enjoy-your-break': 'Th∆∞·ªüng th·ª©c b·ªØa tr∆∞a',
                'keep-it-up': 'Ti·∫øp t·ª•c ph√°t huy!',
                'time-to-go-home': 'ƒê·∫øn gi·ªù v·ªÅ nh√†!',

                // Options
                'settings': 'C√†i ƒë·∫∑t',
                'save': 'L∆∞u',
                'resetDefaults': 'ƒê·∫∑t l·∫°i m·∫∑c ƒë·ªãnh',
                'preLeaveNotifyMinutes': 'Th√¥ng b√°o tr∆∞·ªõc khi v·ªÅ (ph√∫t)',
                'cancel': 'H·ªßy',
                'export-data': 'Xu·∫•t c√†i ƒë·∫∑t',
                'import-data': 'Nh·∫≠p c√†i ƒë·∫∑t',
                'reset-data': 'ƒê·∫∑t l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu',
                'add-holiday': 'Th√™m ng√†y ngh·ªâ',

                // Settings Categories
                'general-settings': 'C√†i ƒë·∫∑t chung',
                'notification-settings': 'C√†i ƒë·∫∑t th√¥ng b√°o',
                'badge-settings': 'C√†i ƒë·∫∑t bi·ªÉu t∆∞·ª£ng',
                'working-days-settings': 'Ng√†y l√†m vi·ªác',
                'holidays-settings': 'Ng√†y ngh·ªâ l·ªÖ',
                'data-management': 'Qu·∫£n l√Ω d·ªØ li·ªáu',
                'language': 'Ng√¥n ng·ªØ',
                'theme': 'Giao di·ªán',
                'badge-mode': 'Ch·∫ø ƒë·ªô hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng',

                // Descriptions
                'required-hours-desc': 'S·ªë gi·ªù l√†m vi·ªác m·∫∑c ƒë·ªãnh m·ªói ng√†y',
                'pre-leave-desc': 'S·ªë ph√∫t tr∆∞·ªõc gi·ªù k·∫øt th√∫c ƒë·ªÉ hi·ªÉn th·ªã nh·∫Øc nh·ªü',
                'language-desc': 'Ng√¥n ng·ªØ giao di·ªán',
                'theme-desc': 'Giao di·ªán tr·ª±c quan cho ti·ªán √≠ch',
                'badge-mode-desc': 'N·ªôi dung hi·ªÉn th·ªã tr√™n bi·ªÉu t∆∞·ª£ng ti·ªán √≠ch',
                'working-days-desc': 'Ch·ªçn nh·ªØng ng√†y b·∫°n th∆∞·ªùng l√†m vi·ªác',
                'holidays-desc': 'Th√™m c√°c ng√†y ngh·ªâ l·ªÖ khi b·∫°n kh√¥ng l√†m vi·ªác',

                // Notifications
                'notif.preLeave.title': 'WorkTime Buddy',
                'notif.preLeave.msg': 'B·∫°n c√≤n {minutes} ph√∫t n·ªØa l√† h·∫øt gi·ªù l√†m vi·ªác!',
                'notif.leaveNow.title': 'WorkTime Buddy',
                'notif.leaveNow.msg': 'H·∫øt gi·ªù l√†m vi·ªác r·ªìi! ƒê·∫øn gi·ªù v·ªÅ nh√†! üè†',
                'notif.backFromLunch.title': 'WorkTime Buddy',
                'notif.backFromLunch.msg': 'Ch√†o m·ª´ng b·∫°n quay l·∫°i sau gi·ªù ngh·ªâ tr∆∞a! ƒê·∫øn gi·ªù l√†m vi·ªác! üíº',
                'notif.workEnded.title': 'WorkTime Buddy',
                'notif.workEnded.msg': 'K·∫øt th√∫c ca l√†m vi·ªác! Ch√∫c b·∫°n c√≥ th·ªùi gian ngh·ªâ ng∆°i tuy·ªát v·ªùi! üåü',
                'notif.overtime.title': 'WorkTime Buddy',
                'notif.overtime.msg': 'Ti·∫øp t·ª•c ch·∫ø ƒë·ªô tƒÉng ca. Nh·ªõ ngh·ªâ gi·∫£i lao nh√©! ‚ö†Ô∏è',

                // Notification Settings
                'pre-leave-notification': 'Th√¥ng b√°o nh·∫Øc nh·ªü tr∆∞·ªõc khi v·ªÅ',
                'end-time-notification': 'Th√¥ng b√°o h·∫øt gi·ªù l√†m vi·ªác',
                'lunch-end-notification': 'Th√¥ng b√°o k·∫øt th√∫c ngh·ªâ tr∆∞a',
                'pre-leave-notification-desc': 'Nh·∫≠n th√¥ng b√°o tr∆∞·ªõc khi k·∫øt th√∫c ng√†y l√†m vi·ªác',
                'end-time-notification-desc': 'Nh·∫≠n th√¥ng b√°o khi h·∫øt gi·ªù l√†m vi·ªác',
                'lunch-end-notification-desc': 'Nh·∫Øc nh·ªü quay l·∫°i l√†m vi·ªác sau ngh·ªâ tr∆∞a',

                // Badge Modes
                'badge-minutes': 'S·ªë ph√∫t c√≤n l·∫°i',
                'badge-hours': 'S·ªë gi·ªù c√≤n l·∫°i',
                'badge-percentage': 'Ph·∫ßn trƒÉm ho√†n th√†nh',
                'badge-none': 'Kh√¥ng hi·ªÉn th·ªã',

                // Days
                'monday': 'Th·ª© Hai',
                'tuesday': 'Th·ª© Ba',
                'wednesday': 'Th·ª© T∆∞',
                'thursday': 'Th·ª© NƒÉm',
                'friday': 'Th·ª© S√°u',
                'saturday': 'Th·ª© B·∫£y',
                'sunday': 'Ch·ªß Nh·∫≠t',

                // Settings description
                'settings-desc': 'T√πy ch·ªânh tr·∫£i nghi·ªám theo d√µi gi·ªù l√†m vi·ªác'
            }
        };
    }

    init() {
        // Set initial language from storage or browser locale
        this.detectLanguage();
        this.translatePage();
    }

    async detectLanguage() {
        try {
            const result = await chrome.storage.sync.get(['language']);
            if (result.language) {
                this.currentLanguage = result.language;
            } else {
                // Detect browser language
                const browserLang = navigator.language || navigator.userLanguage;
                if (browserLang.startsWith('vi')) {
                    this.currentLanguage = 'vi';
                } else {
                    this.currentLanguage = 'en';
                }
            }
        } catch (error) {
            console.error('Error detecting language:', error);
            this.currentLanguage = 'en';
        }
    }

    setLanguage(language) {
        if (this.translations[language]) {
            this.currentLanguage = language;
            this.translatePage();

            // Save language preference
            chrome.storage.sync.set({ language: language }).catch(error => {
                console.error('Error saving language preference:', error);
            });
        }
    }

    translatePage() {
        const elements = document.querySelectorAll('[data-i18n]');
        elements.forEach(element => {
            const key = element.getAttribute('data-i18n');
            const translation = this.getTranslation(key);
            if (translation) {
                if (element.tagName === 'INPUT' && element.type === 'submit') {
                    element.value = translation;
                } else if (element.tagName === 'INPUT' && element.type === 'button') {
                    element.value = translation;
                } else {
                    element.textContent = translation;
                }
            }
        });
    }

    getTranslation(key) {
        return this.translations[this.currentLanguage]?.[key] || this.translations['en']?.[key] || key;
    }

    translate(key) {
        return this.getTranslation(key);
    }

    // Helper function for easy translation access
    t(key, replacements = {}) {
        let translation = this.getTranslation(key);

        // Replace placeholders like {minutes} with actual values
        Object.keys(replacements).forEach(placeholder => {
            const regex = new RegExp(`{${placeholder}}`, 'g');
            translation = translation.replace(regex, replacements[placeholder]);
        });

        return translation;
    }

    // Format time based on language
    formatTime(date, options = {}) {
        const defaultOptions = {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        };

        const formatOptions = { ...defaultOptions, ...options };

        if (this.currentLanguage === 'vi') {
            // Vietnamese time format
            return date.toLocaleTimeString('vi-VN', formatOptions);
        } else {
            // English time format
            return date.toLocaleTimeString('en-US', formatOptions);
        }
    }

    // Format date based on language
    formatDate(date, options = {}) {
        const defaultOptions = {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        };

        const formatOptions = { ...defaultOptions, ...options };

        if (this.currentLanguage === 'vi') {
            return date.toLocaleDateString('vi-VN', formatOptions);
        } else {
            return date.toLocaleDateString('en-US', formatOptions);
        }
    }

    // Get localized notification messages
    getNotificationMessage(type) {
        const messages = {
            en: {
                preLeave: 'You have {minutes} minutes left before your work day ends!',
                endTime: 'Your work day is over! Time to go home! üè†',
                lunchEnd: 'Welcome back from lunch! Time to get back to work! üíº',
                workEnded: 'Work session ended! Have a great rest of your day! üåü',
                overtime: 'Continuing in overtime mode. Remember to take breaks! ‚ö†Ô∏è'
            },
            vi: {
                preLeave: 'B·∫°n c√≤n {minutes} ph√∫t n·ªØa l√† h·∫øt gi·ªù l√†m vi·ªác!',
                endTime: 'H·∫øt gi·ªù l√†m vi·ªác r·ªìi! ƒê·∫øn gi·ªù v·ªÅ nh√†! üè†',
                lunchEnd: 'Ch√†o m·ª´ng b·∫°n quay l·∫°i sau gi·ªù ngh·ªâ tr∆∞a! ƒê·∫øn gi·ªù l√†m vi·ªác! üíº',
                workEnded: 'K·∫øt th√∫c ca l√†m vi·ªác! Ch√∫c b·∫°n c√≥ th·ªùi gian ngh·ªâ ng∆°i tuy·ªát v·ªùi! üåü',
                overtime: 'Ti·∫øp t·ª•c ch·∫ø ƒë·ªô tƒÉng ca. Nh·ªõ ngh·ªâ gi·∫£i lao nh√©! ‚ö†Ô∏è'
            }
        };

        return messages[this.currentLanguage]?.[type] || messages['en']?.[type] || type;
    }

    // Replace placeholders in messages
    formatMessage(message, replacements = {}) {
        let formattedMessage = message;
        Object.keys(replacements).forEach(key => {
            const placeholder = `{${key}}`;
            formattedMessage = formattedMessage.replace(new RegExp(placeholder, 'g'), replacements[key]);
        });
        return formattedMessage;
    }
}

// Create global i18n instance
const i18n = new I18n();
